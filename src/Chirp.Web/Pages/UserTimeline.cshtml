@page "/{author}"
@model Chirp.Web.Pages.UserTimelineModel
@inject SignInManager<Author> SignInManager
@inject UserManager<Author> UserManager
@{
    ViewData["Title"] = "Chirp!";
    Layout = "Shared/_Layout";
    var routeName = HttpContext.GetRouteValue("author")?.ToString();
    var UserFollowersAndTheirCheeps = @Model.FollowersAndTheirCheeps;
    var TLUFollower = @Model.Followers;
    string? username  = User.Identity?.Name;
    Author? SIU = Model.SignedInUser;   // 01. SignedInUser
    Author? TLU = Model.TimelineUser;   // 02. TimelineUser
}

<div class="user-time-line-container">
    <div class="user-time-line-header-container">
        <h3> @routeName's Timeline </h3>
        @if(SignInManager.IsSignedIn(User) && username != null && routeName != username) @* Pack into bool method *@
        {
            @* [PACK INTO PARTIAL #1] *@
            try
            {
                <form method="post" asp-page-handler="Follow">
                    @Html.AntiForgeryToken()
                    @if(SIU.Following.Any() && SIU.Following.Contains<Author>(TLU))
                    {
                        <input type="hidden" asp-for="IsFollow" value="false" />
                        <input type="hidden" asp-for="TargetAuthorUserName" value="@TLU.UserName" />
                        <button type="submit" class="following-button" OnClientClick="return false;">
                            <img id="unfollow" src="/images/unfollow.svg" alt="Unfollow"></img>
                        </button>
                    }
                    else
                    {
                        <input type="hidden" asp-for="IsFollow" value="true" />
                        <input type="hidden" asp-for="TargetAuthorUserName" value="@TLU.UserName" />
                        <button type="submit" class="following-button" OnClientClick="return false;">
                            <img id="follow" src="/images/follow.svg" alt="Follow"></img>
                        </button>
                    }
                </form>
            }
            catch(Exception ex)
            {
                <p>[USER-TIME-LINE.CSHTML] Exception Message: @ex.Message --- Exception Location: @ex.TargetSite</p>
            }
        }
    </div>
    <ul id="messagelist" class="cheeps">
    @if (Model.Cheeps.Any())
    {
        @foreach (var cheep in Model.Cheeps)
        {
            if (cheep.Author.UserName.Equals(routeName))
            {
                <li>
                    <p>
                        <strong>
                            <a href="/@cheep.Author.UserName">@cheep.Author.UserName</a>
                        </strong>
                        @cheep.Text
                        <small>&mdash; @cheep.TimeStamp</small>
                    </p>
                </li>
            }
        }
    }
    else
    {
        <em>There are no cheeps so far.</em>
    }
    </ul>

    <h3> Following </h3>
    <ul class="cheeps"> @* Change class name to something more universal. Was just given same name as above *@
        @if (TLUFollower.Any())
        {
            @foreach (var follower in TLUFollower)
            {
                List<Cheep>? currFollowerCheep = UserFollowersAndTheirCheeps.GetValueOrDefault(follower);

                @if(SignInManager.IsSignedIn(User) && follower.UserName.Equals(User.Identity?.Name))
                {
                    <h5>Your Cheep</h5>
                }
                else
                {
                    <h5><a href="/@follower.UserName">@follower.UserName</a></h5>
                }

                @if(currFollowerCheep != null && currFollowerCheep.Any())
                {
                    @foreach (var cheep in currFollowerCheep)
                    {
                        <li>
                            <p>
                                @cheep.Text
                                <small>&mdash; @cheep.TimeStamp</small>
                            </p>
                        </li>
                    }
                }

            }
        }
        else
        {
            @if(routeName.Equals(username))
            {
                <em>You currently aren't Following anyone.</em>
            } 
            else
            {
                <em>@routeName currently isn't Following anyone.</em>
            }
        }
    </ul>


    <h3> Followers </h3>
    <ul class="cheeps">
        @if (Model.Followers.Any())
        {
            @foreach (var follower in Model.Followers)
            {
                // [TODO] Create simple author books with details on User:
                //        - Number of Cheeps
                //        - Number of Followers
                //        - Picture
                <h5>
                    <a href="/@follower.UserName">@follower.UserName</a>
                </h5>
            }
        }
        else
        {
            @if(routeName == username)
            {
                <em>You currently have no Followers :(</em>
            } 
            else
            {
                <em>@routeName currently has no Followers.</em>
            }
        }
    </ul>
</div>

    <div class="pagination">
        @for (int i = 1; i <= Math.Ceiling((double) Model.totalCheeps / Model.cheepsPerPage) - 1; i++)
        {
            <a href="/@routeName/?page=@i">@i</a>
        }
    </div>

</div>
